// OUTPUT
System.out.println("Hello World");

// INPUT
Scanner myObj = new Scanner(System.in);
String name = scanner.nextLine();

// DATA TYPES

PRIMITIVE TYPE:
byte: 8-bit signed integer. Range: -128 to 127.
short: 16-bit signed integer. Range: -32,768 to 32,767.
int: 32-bit signed integer. Range: -2^31 to 2^31-1.
long: 64-bit signed integer. Range: -2^63 to 2^63-1.
float: 32-bit floating-point. It has a precision of about 7 decimal digits.
double: 64-bit floating-point. It has a precision of about 15 decimal digits.
char: 16-bit Unicode character. Represents a single character/letter.
boolean: Represents two possible values: true or false.

REFERENCE TYPE:
Classes: e.g., String, Scanner, user-defined classes, etc.
Arrays: e.g., int[], String[].
Interfaces: e.g., Runnable, Comparable.
Enums: Special classes representing a group of constants (unchangeable variables).

// VARIABLES

// Primitive types with valid names
int userAge = 25;                 // starts with a letter
double itemPrice = 19.99;         // follows camelCase convention
char studentGrade = 'A';          // descriptive name
boolean isJavaFun = true;         // boolean variable starting with "is"

// Reference types with valid names
String userName = "Anant";        // descriptive name for a String
int[] luckyNumbers = {7, 11, 13}; // descriptive array name

// Incorrect naming examples (commented out because they would cause errors)
// int 1stNumber = 10;   // invalid: cannot start with a number
// double item price = 19.99; // invalid: no spaces allowed
// String class = "MyClass"; // invalid: can't use a reserved word (class)

// OPERATORS

Arithmetic Operators:

+ (Addition), - (Subtraction), * (Multiplication), / (Division), % (Modulus), ++ (Increment), -- (Decrement)

Comparison Operators:

== (Equal to), != (Not equal to), > (Greater than), < (Less than), >= (Greater than or equal to), <= (Less than or equal to)

Logical Operators:

&& (Logical AND), || (Logical OR), ! (Logical NOT)

Assignment Operators:

= (Assign), +=, -=, *=, /=, %= (Modify and assign)

Bitwise Operators:

& (AND), | (OR), ^ (XOR), ~ (NOT), << (Left shift), >> (Right shift), >>> (Unsigned right shift)

Ternary Operator:

condition ? expr1 : expr2

Type Comparison Operator:

instanceof (Checks if an object is an instance of a class)

// CONDITIONAL STATEMENTS

// if-else statement
int score = 75;

if (score >= 90) {
    System.out.println("Grade: A");
} else if (score >= 80) {
    System.out.println("Grade: B");
} else if (score >= 70) {
    System.out.println("Grade: C");
} else {
    System.out.println("Grade: F");
}

// switch case
int day = 3;

switch (day) {
    case 1:
        System.out.println("Monday");
        break;
    case 2:
        System.out.println("Tuesday");
        break;
    case 3:
        System.out.println("Wednesday");
        break;
    default:
        System.out.println("Invalid day");
        break;
}

// ternary operator
int age = 20;
String canVote = (age >= 18) ? "Yes, you can vote." : "No, you can't vote.";
System.out.println(canVote);


// LOOPS:

// For Loop:
String[] fruits = {"apple", "banana", "cherry"};
for (int i = 0; i < fruits.length; i++) {
    System.out.println(fruits[i]);  // Iterates over the array by index
}

// For...Each Loop (Similar to JavaScript's for...of):
for (String fruit : fruits) {
    System.out.println(fruit);  // Directly iterates over array values
}

// forEach Loop (Array method):
// Java Arrays do not have a direct forEach method, but you can use Streams:
java.util.Arrays.stream(fruits).forEach((fruit) -> {
    System.out.println(fruit);
});

// While Loop:
int i = 1;
while (i <= 5) {
    System.out.println(i);
    i++;
}

// Do While Loop (Executes at least once):
i = 1;
do {
    System.out.println(i);
    i++;
} while (i <= 5);

// Break Statement:
for (i = 0; i < 10; i++) {
    if (i == 5) {
        break;  // Exit loop when i is 5
    }
    System.out.println(i);
}

// Continue Statement:
for (i = 0; i < 5; i++) {
    if (i == 2) {
        continue;  // Skip iteration when i is 2
    }
    System.out.println(i);
}

// Nested Loops:
for (i = 0; i < 3; i++) {
    for (int j = 0; j < 2; j++) {
        System.out.println("i = " + i + ", j = " + j);  // Outer and inner loop
    }
}

// Labelled Loops with Break:
outerLoop:
for (i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
        if (i == 1 && j == 1) {
            break outerLoop;  // Breaks out of both loops
        }
        System.out.println("i = " + i + ", j = " + j);
    }
}
