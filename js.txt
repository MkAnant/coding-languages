// OUTPUT
console.log("Hello World");

// INPUT

// for browser
prompt("Please enter your input:"); 

// for node js with 'npm i readline-sync'
const readlineSync = require('readline-sync');
let userInput = readlineSync.question('Please enter your input: ');

// DATA TYPES
Number 25, 2.55
String "Hello', 'World', `Bye ${userInput}`
Boolean true, false
Undefined let something;
Null let nothing = null;
Object user = {name:'John', age:25}

// VARIABLES
let userName = "Alice";
let userAge = 25;
let isUserLoggedIn = true;
const MAX_RETRIES = 5;
const max_retries = 7; // different as Case sensitive

-- VAR v/s LET v/s CONST --
function example() {
   var x = 10; // function-scoped
   let y = 20; // block-scoped
   const z = 30; // block-scoped, cannot be reassigned

   if (true) {
      let y = 40; // block-scoped within the if statement
      console.log(x); // 10
      console.log(y); // 40
      // z = 40; // Error: Assignment to constant variable
   }
   console.log(y); // 20
   console.log(x); // 10
   // z = 40; // Error: Assignment to constant variable
}

// OPERATORS

Arithmetic Operators:

+ (Addition), - (Subtraction), * (Multiplication), / (Division), % (Modulus), ** (Exponentiation)

Comparison Operators:

== (Equal to), != (Not equal to), === (Strict equal to), !== (Strict not equal to), > (Greater than), < (Less than), >= (Greater than or equal to), <= (Less than or equal to)

Logical Operators:

&& (Logical AND), || (Logical OR), ! (Logical NOT)

Assignment Operators:

= (Assign), +=, -=, *=, /=, %=, **= (Modify and assign)

Bitwise Operators:

& (AND), | (OR), ^ (XOR), ~ (NOT), << (Left shift), >> (Right shift), >>> (Zero-fill right shift)

Type Operators:

typeof (Type of), instanceof (Instance of)

Nullish Coalescing Operator:

?? (Nullish Coalescing)

Optional Chaining Operator:

?. (Optional Chaining)

// CONDITIONAL STATEMENTS

if else:
let score = 75;

if (score >= 90) {
  console.log("Grade: A");
} else if (score >= 80) {
  console.log("Grade: B");
} else if (score >= 70) {
  console.log("Grade: C");
} else {
  console.log("Grade: F");
}

switch case:
let day = 3;

switch (day) {
  case 1:
    console.log("Monday");
    break;
  case 2:
    console.log("Tuesday");
    break;
  case 3:
    console.log("Wednesday");
    break;
  default:
    console.log("Invalid day");
}

ternary operator:
let age = 20;
let canVote = (age >= 18) ? "Yes, you can vote." : "No, you can't vote.";
console.log(canVote);

// LOOPS: 

For Loop:
let fruits = ['apple', 'banana', 'cherry'];
for (let i = 0; i < fruits.length; i++) {
    console.log(fruits[i]);  // Iterates over the array by index
}

For...of Loop:
for (let fruit of fruits) {
    console.log(fruit);  // Directly iterates over array values
}

For...in Loop (Best for Objects):
let car = {brand: 'Toyota', model: 'Corolla', year: 2020};
for (let key in car) {
    console.log(`${key}: ${car[key]}`);  // Iterates over object properties
}

forEach Loop (Array method):
fruits.forEach((fruit, index) => {
    console.log(`Fruit at index ${index}: ${fruit}`);
});

While Loop:
let i = 1;
while (i <= 5) {
    console.log(i);
    i++;
}

Do While Loop (Executes at least once):
i = 1;
do {
    console.log(i);
    i++;
} while (i <= 5);

Break Statement:
for (let i = 0; i < 10; i++) {
    if (i === 5) {
        break;  // Exit loop when i is 5
    }
    console.log(i);
}

Continue Statement:
for (let i = 0; i < 5; i++) {
    if (i === 2) {
        continue;  // Skip iteration when i is 2
    }
    console.log(i);
}

Nested Loops:
for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 2; j++) {
        console.log(`i = ${i}, j = ${j}`);  // Outer and inner loop
    }
}

Labelled Loops with Break:
outerLoop:
for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
        if (i === 1 && j === 1) {
            break outerLoop;  // Breaks out of both loops
        }
        console.log(`i = ${i}, j = ${j}`);
    }
}
